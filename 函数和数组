//--------------------------2021.2.9日----------------------------------------------
//---------------------------------------用函数写二分查找----------------------------------
//#include<stdio.h>
//int binarysearch(int a[], int x, int sz)
//{
//	int left = 0;
//	int right = sz - 1;
//	int mid = 0;
//	while (left <= right)
//	{
//		mid = (left + right) / 2;
//		if (a[mid] > x)
//		{
//			right = mid - 1;
//		}
//		else
//		{
//			if (a[mid] < x)
//			{
//				left = mid + 1;
//			}
//			else
//			{
//				return mid;
//			}
//		}
//	}
//	return -1;
//}
//int main(void)
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int k = 7;
//	int ret = binarysearch(arr, k, sz);
//	if (-1 == ret)
//	{
//		printf("没找到这个数字");
//	}
//	else
//	{
//		printf("找到了，下标是：%d", ret);
//	}
//	
//	return 0;
//}
//-------------------------函数递归之数字之间打印空格----------------
//#include<stdio.h>
//void print(int a)
//{
//	if (a < 10) printf("%d", a);
//	if (a >= 10)
//	{
//		print(a / 10);
//		printf(" %d", a % 10);
//		
//	}
//
//}
//int main(void)
//{
//	int a = 1234;
//	print(a);
//	return 0;
//}
//
//-----------------------函数递归之求字符串的长度------------------
//#include<stdio.h>
//int astrlen(const char* a)
//{
//	if ((*a) == '\0') return 0;
//	else return  1 + astrlen(a + 1);
//}
//int main(void)
//{
//	char* a= "abcdef";
//	int b = astrlen(a);
//	printf("%d", b);
//	return 0;
//}
//--------------------斐波那契数列（高效版）-----------------------
//#include<stdio.h>
//int fib(int x)
//{
//	int count = 2;
//	int a = 1;
//	int b = 1;
//	int c = 0;
//	if (x == 1) return 1;
//	if (x == 2) return 1;
//	if (x >= 3)
//	{
//		while (count != x)
//		{
//			c = a + b;
//			a = b;
//			b = c;
//			
//			count++;
//		}
//	}
//	return c;
//}
//int main(void)
//{
//	int a = 0;
//	scanf("%d", &a);
//	int b = fib(a);
//	printf("%d", b);
//	return 0;
//}
////1 1 2 3 5 8 13
//------------------------------sizeof和strlen--------------------
//#include<stdio.h>
//int main(void)
//{
//	char a[] = { 'a', 'b', 'c' };
//	printf("%d", sizeof(a));
//	return 0;
//}
//------------------------冒泡排序(排成降序）--------------------------------
#include<stdio.h>
#include<string.h>
void bubble_sort(int a[])
{
	int i = 0;
	int j = 0;
	int len = strlen(a);
	int b = 1;
	while (b)
	{
		for (i = 0; i < len-1; i++)
		{
			
			int tmp = 0;
			b = 0;
			if (a[i]<a[i+1])
			{
				b = 1;
				tmp = a[i];
				a[i] = a[j];
				a[j] = tmp;
			}
		}
			
	}

}
	
	

}
int main(void)
{
	int arr[] = { 1, 32, 3, 4, 87, 6, 56, 97, 54, 18 };
	bubble_sort(arr);
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
//上面那个错了
//---------------------------冒泡排序1----------------------------
#include<stdio.h>
void bubble_sort(int a[],int len)
{
	int i = 0;
	int j = 0;
	int b = 1;
	int tmp = 0;
	while (b)
	{
		b = 0;
		for (i = 0; i < len - 1; i++)
		{
			if (a[i]<a[i + 1])
			{
				b = 1;
				tmp = a[i];
				a[i] = a[i+1];
				a[i+1] = tmp;
			}
		}

	}

}




int main(void)
{
	int arr[] = { 1, 32, 3, 4, 87, 6, 56, 97, 54, 18 };
	bubble_sort(arr,10);
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}

