//*******************************************三子棋小游戏******************************************
//------------------------------------------------------test.c----------------------------
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include"game.h"
void game()
{
	char a = 0;
	//定义一个数组棋盘
	char board[ROW][COL] = { 0 };
	//初始化棋盘
	initboard(board, ROW, COL);
	displayboard(board, ROW, COL);
	while (1)
	{
		//玩家走
		playermove(board, ROW, COL);
		//显示棋盘
		displayboard(board, ROW, COL);
		//判断是否赢 *玩家赢#电脑赢P平局j继续
		a = iswin(board, ROW, COL);
		if (a != 'j')
			break;
		//电脑走
		computermove(board, ROW, COL);
		displayboard(board, ROW, COL);
	    a = iswin(board, ROW, COL);
		if (a != 'j')
			break;
	}
	if ('*' == a)
		printf("玩家赢\n");
	else if ('#'==a)
	{
		printf("电脑赢\n");
	}
	else
	{
		printf("平局\n");
	}
}
void menu()
{
	printf("****************************\n");
	printf("*  开始游戏：1  退出游戏：0  *\n");
	printf("****************************\n");
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择->");
		scanf("%d", &input);
		switch (input)
		{
			case 1://case语句不用大括号
				printf("三子棋游戏开始");
				game();
				break;
			case 0:
				printf("退出游戏");
				break;
			default:
				printf("输入错误，重新选择");
				break;
		}
	} while (input);
}
int main(void)
{
	test();
	return 0;
}
//----------------------------------------------------game.c--------------------------------------
#define _CRT_SECURE_NO_WARNINGS 1
#include "game.h"
void initboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < ROW; i++)
	{
		for (j = 0; j < COL; j++)
			board[i][j] = ' ';
	}
}

//   |   |   
//---|---|---
//   |   |   
//---|   |---
//   |   |   

void displayboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	printf("\n");
	int k = 0;
	for (i = 0; i < ROW; i++)
	{
		for (j = 0; j < COL; j++)
		{
			printf(" %c ", board[i][j]);
			if ((COL - 1) != j)
				printf("|");
		}
		printf("\n");
		if (i != (ROW - 1))
		{
			for (k = 0; k < COL; k++)
			{
				printf("---");
				if ((COL - 1) != k)
					printf("|");
			}
		}
		printf("\n");
			
	}
}
void playermove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走->\n");
	while (1)
	{
		printf("请输入要下的坐标：");
		scanf("%d%d", &x, &y);
		if ((x >= 1 && x <= row) && (y >= 1 && y <= col))
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
				printf("该位置已经被占用\n");
		}
		else
		{
			printf("该位置不在范围之内\n");
		}
	}
}
void computermove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	while (1)
	{
		printf("电脑走->\n");
		x = rand()%ROW;
		y = rand()%COL;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}
	

}
int isfull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	int q = 1;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < row; j++)
		{
			if (board[i][j] == ' ')
				q = 0;
		}
	}
	return q;
}
char iswin(char board[ROW][COL], int row, int col)
{
	int i = 0;
	//判断横三行
	for (i = 0; i < row; i++)
	{
		if (board[i][0]==board[i][1]&&board[i][1]==board[i][2]&&board[i][2]!=' ')
		{
			return board[i][0];
		}
	}
	//判断竖三列
	for (i = 0; i < col; i++)
	{
		if (board[0][i]==board[1][i]&&board[1][i]==board[2][i]&&board[1][i]!=' ')
		{
			return board[0][i];
		}
	}
	//判断对角线
	if (board[0][0] == board[1][1]&&board[1][1] == board[2][2]&&board[0][0]!=' ')
		return board[2][2];
	if (board[2][0] == board[1][1]&&board[1][1] == board[0][2]&&board[0][0]!=' ')//这里三个连等了,这是不对的啊
		return board[1][1];
	//判断是平局还是继续
	if (1 == isfull(board, ROW, COL))
		return 'P';
	return 'j';
}
//---------------------------------------game.h-----------------------------------
#define ROW 3
#define COL 3
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void initboard(char board[ROW][COL], int row, int col);
void displayboard(char board[ROW][COL], int row, int col);
void playermove(char board[ROW][COL], int row, int col);
void computermove(char board[ROW][COL], int row, int col);
char iswin(char board[ROW][COL], int row, int col);
//**********************************************************扫雷小游戏*******************************************************
//-------------------------------------------------game.h-----------------------------
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define EASY_COUNT 10
#define ROW 9
#define COL 9
#define ROWS ROW+2
#define COLS COL+2
void InitBoard(char board[ROWS][COLS], int row, int col, char ret);
void DisplayBoard(char board[ROWS][COLS], int row, int col);
void Setmine(char board[ROWS][COLS], int row, int col);
void Findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col);
//---------------------------game.c-------------------
#define _CRT_SECURE_NO_WARNINGS 1
#include"game.h"
void InitBoard(char board[ROWS][COLS], int row, int col,char ret)
{
	
	int i = 0;
	int j = 0;
	for (i = 0; i < ROWS; i++)
	{
		for (j = 0; j < COLS; j++)
			board[i][j] = ret;
	}
}
void DisplayBoard(char board[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	int k = 0;
	for (k = 0; k <= col; k++)
	{
		printf("%d",k);
		if (k != col)
			printf("  ");
	}
	printf("\n");
	for (i = 1; i <= row; i++)
	{
		printf("%d ", i);
		for (j = 1; j <=col; j++)
		{
			printf(" %c ", board[i][j]);
		}
		printf("\n");
	}
}
void Setmine(char board[ROWS][COLS], int row, int col)

{
	int count = EASY_COUNT;
	while (count)
	{
		int x = 0, y = 0;
		x = rand() % row+1;
		y = rand() % col+1;
		if (board[x][y] == '0')
		{
			board[x][y] = '1';
			count--;
		}
			
	}
}
int Showout(char board[ROWS][COLS], int x, int y)
{
	return board[x][y + 1] + board[x][y - 1] +
		board[x - 1][y] + board[x + 1][y] +
		board[x - 1][y - 1] + board[x - 1][y + 1] +
		board[x + 1][y - 1] + board[x + 1][y + 1]-8*'0';

}

void Findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	printf("请输入坐标：->");
	int x = 0, y = 0,win=0;
	while (1)
	{
		scanf("%d%d", &x, &y);
		if (mine[x][y] == '1')
		{
			printf("你被炸死了");
			DisplayBoard(mine, ROW, COL);
			break;
		}
		else
		{
			int ret = 0;
			ret = Showout(mine, x, y);
			show[x][y] = '0' + ret;
			DisplayBoard(show, ROW, COL);
			win++;
			if (win == ROW*COL - EASY_COUNT)
				break;
		}
	}
	
}
//---------------------------test.c--------------------------------
#define _CRT_SECURE_NO_WARNINGS 1
//要点：
//1.一小步一小步的测试
//2.布置雷还不是很熟练啊
#include"game.h"
void menu(void)
{
	printf("**************************\n");
	printf("*****1.play   0.exit *****\n");
	printf("**************************\n");
}
void game()
{
	//定义--布局扫雷，定义--打印扫雷
	char mine[ROWS][COLS] = { 0 };
	char show[ROWS][COLS] = { 0 };
	//////测试printf("扫雷\n");//一步一步的测试
	//初始化
	InitBoard(mine, ROWS, COLS,'0');
	InitBoard(show, ROWS, COLS,'*');
	//打印棋盘
	DisplayBoard(mine, ROW, COL);
	DisplayBoard(show, ROW, COL);
	//布置雷
	Setmine(mine, ROW, COL);
	DisplayBoard(mine, ROW, COL);
	//扫雷
	Finemine(show, mine, ROW, COL);
}
void text()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择：");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏");
			break;
		}
	} while (input);

}
int main(void)
{
	text();
	return 0;
}
//小结：
//第一次运行的时候出现了这样的错误：
//  game.c
//1>test.obj : error LNK2019: 无法解析的外部符号 _Finemine，该符号在函数 _game 中被引用
//1>C:\Users\lenovo\Desktop\比特科技\扫雷游戏\Debug\扫雷游戏.exe : fatal error LNK1120: 1 个无法解析的外部命令
//总是说无法解析，我打算重新创建一下项目看看行不行
//哎~~~~~~~~~~~,我重新试了一下还是不行啊，我差找一下资料吧
